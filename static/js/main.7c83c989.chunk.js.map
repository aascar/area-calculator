{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["LocationMarkers","useState","positions","setPositions","map","useMapEvents","click","locate","locationfound","e","newPositions","latlng","flyTo","getZoom","position","Marker","Popup","Polygon","pathOptions","polygonOptions","color","App","className","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAcA,SAASA,IAAmB,IAAD,EACSC,mBAAS,IADlB,mBAClBC,EADkB,KACPC,EADO,KAGnBC,EAAMC,YAAa,CACvBC,MADuB,WAErBF,EAAIG,UAENC,cAJuB,SAITC,GACZ,IAAMC,EAAY,sBAAOR,GAAP,CAAkBO,EAAEE,SACtCR,EAAaO,GACbN,EAAIQ,MAAMH,EAAEE,OAAQP,EAAIS,cAI5B,OACE,qCACGX,EAAUE,KAAI,SAAAU,GAAQ,OAAI,cAACC,EAAA,EAAD,CAAQD,SAAUA,EAAlB,SACzB,eAACE,EAAA,EAAD,mCACuB,uBADvB,gCAIF,cAACC,EAAA,EAAD,CAASC,YAAaC,EAAgBjB,UAAWA,OAKvD,IAAMiB,EAAiB,CAAEC,MAAO,UAiBjBC,MAff,WAEE,OACE,qBAAKC,UAAU,MAAf,SACE,eAACC,EAAA,EAAD,CAAcC,OAAQ,CAAC,QAAS,KAAOC,KAAM,GAAIC,iBAAiB,EAAMJ,UAAU,gBAAlF,UACE,cAACK,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAAC7B,EAAD,UCvCO8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7c83c989.chunk.js","sourcesContent":["import './App.css';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents, Polygon } from 'react-leaflet';\nimport { useState } from 'react';\n\nfunction polygonArea(positions = [], n) {\n  let area = 0.0;\n  let j = n - 1;\n  for (let i = 0; i < n; i++) {\n    area += (positions[j][0] + positions[i][0]) * (positions[j][1] - positions[i][1]);\n    j = i;\n  }\n  return Math.abs(area / 2.0);\n}\n\nfunction LocationMarkers() {\n  const [positions, setPositions] = useState([]);\n\n  const map = useMapEvents({\n    click() {\n      map.locate()\n    },\n    locationfound(e) {\n      const newPositions = [...positions, e.latlng];\n      setPositions(newPositions);\n      map.flyTo(e.latlng, map.getZoom());\n    },\n  });\n\n  return (\n    <>\n      {positions.map(position => <Marker position={position}>\n        <Popup>\n          A pretty CSS3 popup. <br /> Easily customizable.\n        </Popup>\n      </Marker>)}\n      <Polygon pathOptions={polygonOptions} positions={positions} />\n    </>\n  )\n}\n\nconst polygonOptions = { color: 'purple' }\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <MapContainer center={[51.505, -0.09]} zoom={13} scrollWheelZoom={true} className='map-container'>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <LocationMarkers />\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}