{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["LAT_DIST","Math","PI","LocationMarkers","useState","positions","setPositions","map","useMapEvents","click","locate","locationfound","e","newPositions","latlng","flyTo","getZoom","area","n","j","i","lng","lat","abs","polygonArea","o","cos","console","log","length","className","position","Marker","Popup","toString","Polygon","pathOptions","polygonOptions","color","App","setPosition","useEffect","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAIMA,EAAY,QAAUC,KAAKC,GAAM,IAYvC,SAASC,IAAmB,IAAD,EACSC,mBAAS,IADlB,mBAClBC,EADkB,KACPC,EADO,KAGnBC,EAAMC,YAAa,CACvBC,MADuB,WAErBF,EAAIG,UAENC,cAJuB,SAITC,GACZ,IAAMC,EAAY,sBAAOR,GAAP,CAAkBO,EAAEE,SACtCR,EAAaO,GACbN,EAAIQ,MAAMH,EAAEE,OAAQP,EAAIS,cAItBC,EAxBR,WAGE,IAHuC,IAApBZ,EAAmB,uDAAP,GAAIa,EAAG,uCAClCD,EAAO,EACPE,EAAID,EAAI,EACHE,EAAI,EAAGA,EAAIF,EAAGE,IACrBH,IAASZ,EAAUc,GAAGE,IAAMhB,EAAUe,GAAGC,MAAQhB,EAAUc,GAAGG,IAAMjB,EAAUe,GAAGC,KACjFF,EAAIC,EAEN,OAAOnB,KAAKsB,IAAIN,EAAO,GAiBVO,CAAYnB,EAAUE,KAAI,SAAAkB,GAAC,kCAASA,GAAT,IAAYH,IAAKG,EAAEH,IAAMtB,EAAUqB,IAAKI,EAAEJ,IAAMrB,EAAWC,KAAKyB,IAAID,EAAEH,WAI9G,OAFAK,QAAQC,IAAIvB,EAAWY,GAGrB,qCACGZ,EAAUwB,OAAS,GAAK,qBAAKC,UAAU,cAAf,SACvB,8BAAIb,EAAJ,YAEDZ,EAAUE,KAAI,SAACwB,EAAUX,GAAX,OAAiB,cAACY,EAAA,EAAD,CAA2BD,SAAUA,EAArC,SAC9B,eAACE,EAAA,EAAD,mCACuB,uBADvB,4BAD2Cb,EAAEc,eAK/C,cAACC,EAAA,EAAD,CAASC,YAAaC,EAAgBhC,UAAWA,OAKvD,IAAMgC,EAAiB,CAAEC,MAAO,UA4BjBC,MA1Bf,WAAgB,IAAD,EAEmBnC,qBAFnB,mBAEN2B,EAFM,KAEIS,EAFJ,KAUb,OANAC,qBAAU,WACRC,UAAUC,YAAYC,oBAAmB,SAASb,GAChDS,EAAY,CAACT,EAASc,OAAOC,SAAUf,EAASc,OAAOE,iBAExD,IAGD,qBAAKjB,UAAU,MAAf,SACGC,EACC,eAACiB,EAAA,EAAD,CAAcC,OAAQlB,EAAUmB,KAAM,GAAIC,iBAAiB,EAAMrB,UAAU,gBAA3E,UACA,cAACsB,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,mLAEN,cAACnD,EAAD,OAEA,mFC3DOoD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.beb1ff3b.chunk.js","sourcesContent":["import './App.css';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents, Polygon } from 'react-leaflet';\nimport { useState, useEffect } from 'react';\n\nconst LAT_DIST = (6371009 * Math.PI) / 180;\n\nfunction polygonArea(positions = [], n) {\n  let area = 0.0;\n  let j = n - 1;\n  for (let i = 0; i < n; i++) {\n    area += (positions[j].lng + positions[i].lng) * (positions[j].lat - positions[i].lng);\n    j = i;\n  }\n  return Math.abs(area / 2.0);\n}\n\nfunction LocationMarkers() {\n  const [positions, setPositions] = useState([]);\n\n  const map = useMapEvents({\n    click() {\n      map.locate()\n    },\n    locationfound(e) {\n      const newPositions = [...positions, e.latlng];\n      setPositions(newPositions);\n      map.flyTo(e.latlng, map.getZoom());\n    },\n  });\n\n  const area = polygonArea(positions.map(o => ({...o, lat: o.lat * LAT_DIST, lng: o.lng * LAT_DIST * Math.cos(o.lat)})));\n\n  console.log(positions, area);\n\n  return (\n    <>\n      {positions.length > 2 && <div className=\"area-banner\">\n        <p>{area} sqm</p>\n      </div>}\n      {positions.map((position, i) => <Marker key={i.toString()} position={position}>\n        <Popup>\n          A pretty CSS3 popup. <br /> Easily customizable.\n        </Popup>\n      </Marker>)}\n      <Polygon pathOptions={polygonOptions} positions={positions} />\n    </>\n  )\n}\n\nconst polygonOptions = { color: 'purple' }\n\nfunction App() {\n\n  const [position, setPosition] = useState();\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(function(position) {\n      setPosition([position.coords.latitude, position.coords.longitude]);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {position ? \n        <MapContainer center={position} zoom={18} scrollWheelZoom={true} className='map-container'>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoidHJ5bWFwYngiLCJhIjoiY2t0cTJvM28yMHNhMzJvbDRmN2JrYm1keSJ9.tnVmcELQHcF56L_ftEniJQ\"\n        />\n        <LocationMarkers />\n      </MapContainer>\n      : <h1>We need your location access to render the Map</h1>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}